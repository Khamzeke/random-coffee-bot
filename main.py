import asyncio
import random
from datetime import datetime, date, timedelta

import aioschedule as aioschedule
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher, FSMContext

import database
from cfg import BOT_TOKEN
from states import FSMData, UserState
from pprint import pprint
import sheet_base

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

after7days = InlineKeyboardButton(text='–ü—Ä–æ–ø—É—â—É –Ω–µ–¥–µ–ª—é', callback_data='choice:week')
after30days = InlineKeyboardButton(text='–ü—Ä–æ–ø—É—â—É –º–µ—Å—è—Ü..', callback_data='choice:month')
ready = InlineKeyboardButton(text='–î–∞, –∫–æ–Ω–µ—á–Ω–æ!', callback_data='choice:ready')

choice = InlineKeyboardMarkup().add(*[ready, after7days, after30days])


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è —Ç–µ–±–µ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π '
        '–Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n'
        '–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–≥–Ω–∞–ª–∏!')
    await message.answer('–ù–∞–ø–∏—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é')
    await FSMData.name.set()
    await message.answer_chat_action('typing')


@dp.message_handler(state=FSMData.name)
async def getName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer('–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?')
    await FSMData.next()


@dp.message_handler(state=FSMData.city)
async def getCity(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer(
        '–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, –≥–¥–µ –µ—Å—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ.')
    await FSMData.next()


@dp.message_handler(state=FSMData.profile)
async def getProfile(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['profile'] = message.text
    await message.answer('–í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?')
    await FSMData.next()


@dp.message_handler(state=FSMData.company)
async def getCompany(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company'] = message.text
    await message.answer('–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?(–î–æ–ª–∂–Ω–æ—Å—Ç—å, –ø–æ–∑–∏—Ü–∏—è)')
    await FSMData.next()


@dp.message_handler(state=FSMData.role)
async def getRole(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['role'] = message.text
    await message.answer('–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–≤–æ–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?')
    await FSMData.next()


@dp.message_handler(state=FSMData.usefulness)
async def getUsefulness(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['usefulness'] = message.text
    async with state.proxy() as data:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add('–•–æ—á—É –æ–±—â–∞—Ç—å—Å—è')
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –∏ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n"
                             f"<b>–ò–º—è:</b> {data['name']}\n"
                             f"<b>–ì–æ—Ä–æ–¥:</b> {data['city']}\n"
                             f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data['company']}\n"
                             f"<b>–ó–∞–Ω—è—Ç–∏–µ:</b> {data['role']}\n"
                             f"<b>–û —Å–µ–±–µ:</b> {data['usefulness']}\n\n"
                             f"–ù–∞–∂–º–∏ <b>–•–æ—á—É –æ–±—â–∞—Ç—å—Å—è</b> –∏ —è –Ω–∞—á–Ω—É –∏—Å–∫–∞—Ç—å —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏!",
                             parse_mode='HTML'
                             , reply_markup=kb)
        database.addUser(message.from_user.id, data)
    await state.finish()


@dp.message_handler(state='*', text=['–•–æ—á—É –æ–±—â–∞—Ç—å—Å—è'])
async def search(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω–æ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —è –Ω–∞–π–¥—É —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –æ–∂–∏–¥–∞–π!")
    database.updateUserStatus(message.from_user.id, True)


async def findCompanion():
    users = database.getUsersByReadyStatus(True)
    users = random.sample(users, len(users))
    while len(users) > 1:
        try:
            await bot.send_chat_action(users[0][0],"typing")
        except:
            database.deleteUser(users[0][0])
            continue
        try:
            await bot.send_chat_action(users[1][0], "typing")
        except:
            database.deleteUser(users[1][0])
            continue

        database.createAppointment(users[0][0], users[1][0])
        database.makeReadyStatus(users[0][0], False)
        database.makeReadyStatus(users[1][0], False)
        try:
            button = InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É!', url=f"tg://user?id={users[0][0]}")
            await bot.send_message(users[1][0], f"–ü—Ä–∏–≤–µ—Ç!üëã‚Äã\n"
                                                f"–¢–≤–æ—è –ø–∞—Ä–∞ –≤ Random Coffee –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n"
                                                f"{users[0][1]}({users[0][2]})\n"
                                                f"–ü—Ä–æ—Ñ–∏–ª—å - {users[0][3]}\n"
                                                f"–ö–æ–º–ø–∞–Ω–∏—è: {users[0][4]}\n"
                                                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {users[0][5]}\n"
                                                f"–ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {users[0][6]}\n"
                                                f"\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π, –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ —Å—Ä–∞–∑—É üôÇ ", parse_mode='HTML', reply_markup=InlineKeyboardMarkup().add(button))
        except:
            print(f'[ERROR] The user {users[1][0]} blocked the bot')
        try:
            button = InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É!', url=f"tg://user?id={users[1][0]}")
            await bot.send_message(users[0][0], f"–ü—Ä–∏–≤–µ—Ç!üëã‚Äã\n"
                                                f"–¢–≤–æ—è –ø–∞—Ä–∞ –≤ Random Coffee –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n"
                                                f"{users[1][1]}({users[1][2]})\n"
                                                f"–ü—Ä–æ—Ñ–∏–ª—å - {users[1][3]}\n"
                                                f"–ö–æ–º–ø–∞–Ω–∏—è: {users[1][4]}\n"
                                                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {users[1][5]}\n"
                                                f"–ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {users[1][6]}\n"
                                                f"\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π, –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ —Å—Ä–∞–∑—É üôÇ ", parse_mode='HTML', reply_markup=InlineKeyboardMarkup().add(button))
        except:
            print(f'[ERROR] The user {users[0][0]} blocked the bot')
        users.remove(users[0])
        users.remove(users[0])


async def searching():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
        await asyncio.sleep(300)
        if datetime.now().weekday() == 3:  # monday and after 17:00
            database.clearAppointments()
            sheet_base.inputUsers(database.getUsers(), len(database.getUsers()))
            await findCompanion()
            sheet_base.inputAppointments(database.getAppointments(), len(database.getAppointments()))
        await asyncio.sleep(600)
        if datetime.now().weekday() == 3:  # wednesday and after 14:00
            users = database.getUsersByReadyStatus(False)
            for user in users:
                if database.getUserLastAppointment(user[0]) is not None:
                    #appointment = database.getUserLastAppointment(user[0])
                    findNewBtn = InlineKeyboardButton(text='–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', callback_data='newcomp')
                    try:
                        await bot.send_message(user[0],
                                               "üëã –ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ä—ç–Ω–¥–æ–º-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ.\n"
                                               "–ï—Å–ª–∏ –∂–µ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, "
                                               "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É üé≤",
                                               reply_markup=InlineKeyboardMarkup().add(findNewBtn))
                    except:
                        print(f'[ERROR] The user {user[0]} blocked the bot')
        await asyncio.sleep(600)
        if datetime.now().weekday() == 3:  # datetime.now().weekday() == 5 and datetime.now().hour == 14 and
            # datetime.now().minute = 3
            users = database.getUsersByReadyStatus(False)
            for user in users:
                if user[8] <= date.today():
                    try:
                        database.setAnswerDate(user[0],'week')
                        await bot.send_message(user[0],
                                               f"–í–ù–ò–ú–ê–ù–ò–ï, –≠–¢–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï! –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, "
                                               f"–Ω–∞–ø–∏—à–∏—Ç–µ @yeapit\n\n"
                                               f"–ü—Ä–∏–≤–µ—Ç!üëã\n"
                                               f"–í—Å—Ç—Ä–µ—á–∏ Random Coffee –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è :)\n"
                                               f"–£—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?", reply_markup=choice)
                    except:
                        print(f'[ERROR] The user {user[0]} blocked the bot')
            #database.execute(f"update users set ready=true where answer_date<= '{date.today()}'")
        await asyncio.sleep(20)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('choice:'))
async def getChoice(callback_query: types.CallbackQuery):
    text = callback_query.message.text
    if callback_query.data == 'choice:ready':
        database.makeReadyStatus(callback_query.from_user.id, True)
        database.setAnswerDate(callback_query.from_user.id, date.today())
        await callback_query.message.edit_text(text+"\n\nüëâ –î–∞, –∫–æ–Ω–µ—á–Ω–æ!")
        await callback_query.message.answer('–û—Ç–ª–∏—á–Ω–æ!üëç\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.')
    elif callback_query.data == 'choice:week':
        database.makeReadyStatus(callback_query.from_user.id, False)
        database.setAnswerDate(callback_query.from_user.id, 'week')
        await callback_query.message.edit_text(text+"\n\nüëâ –ü—Ä–æ–ø—É—â—É –Ω–µ–¥–µ–ª—é")
        await callback_query.message.answer('–û–∫, –∑–∞–ø–∏—Å–∞–ª! üëå\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!')
    elif callback_query.data == 'choice:month':
        database.makeReadyStatus(callback_query.from_user.id, False)
        database.setAnswerDate(callback_query.from_user.id, 'month')
        await callback_query.message.edit_text(text+"\n\nüëâ –ü—Ä–æ–ø—É—â—É –º–µ—Å—è—Ü..")
        await callback_query.message.answer('–û–∫, –∑–∞–ø–∏—Å–∞–ª! üëå\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü!')
    yes_btn = InlineKeyboardButton('–î–∞, —Å–æ—Å—Ç–æ—è–ª–∞—Å—å!', callback_data='event:yes')
    no_btn = InlineKeyboardButton('–ù–µ—Ç, –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å...', callback_data='event:no')
    kb = InlineKeyboardMarkup().add(*[yes_btn, no_btn])
    await callback_query.message.answer(f'–ù–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å.\n'
                                        f'–°–æ—Å—Ç–æ—è–ª–∞—Å—å –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ —Å {database.getUserCompanion(callback_query.from_user.id)[1]}?', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('event:'))
async def eventListen(callback_query: types.CallbackQuery):
    text = callback_query.message.text
    if callback_query.data == 'event:yes':
        await callback_query.message.edit_text(text+'\n\nüëâ –î–∞, —Å–æ—Å—Ç–æ—è–ª–∞—Å—å!')
        online_btn = InlineKeyboardButton('–û–Ω–ª–∞–π–Ω', callback_data='event:online')
        offline_btn = InlineKeyboardButton('–í–∂–∏–≤—É—é', callback_data='event:offline')
        await callback_query.message.answer('–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –≤–∂–∏–≤—É—é –∏–ª–∏ –æ–Ω–ª–∞–π–Ω?', reply_markup=InlineKeyboardMarkup().add(*[offline_btn,online_btn]))
    elif callback_query.data == 'event:no':
        await callback_query.message.edit_text(text+'\n\nüëâ –ù–µ—Ç, –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å...')
        ignored_btn = InlineKeyboardButton('–ù–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data='event:online')
        _btn = InlineKeyboardButton('–í–∂–∏–≤—É—é', callback_data='event:offline')
        await callback_query.message.answer('–ß—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫—É—é –ø–∞—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥–±–∏—Ä–∞—Ç—å, —Ä–∞—Å—Å–∫–∞–∂–∏, –ø–æ—á–µ–º—É –Ω–µ –ø–æ–¥–æ—à–µ–ª —ç—Ç–æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫?',
                                            reply_markup=InlineKeyboardMarkup().add(*[]))

@dp.callback_query_handler(lambda c: c.data and c.data=='newcomp')
async def newCompanion(callback_query: types.CallbackQuery):
    text = callback_query.message.text
    await callback_query.message.edit_text(text+'\n\nüëâ –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç')
    await callback_query.message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ò—â—É –Ω–æ–≤—É—é –ø–∞—Ä—É. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')
    database.makeReadyStatus(callback_query.from_user.id, True)
    await findCompanion()


async def on_startup(_):
    sheet_base.inputUsers(database.getUsers(), len(database.getUsers()))
    asyncio.create_task(searching())
    sheet_base.inputAppointments(database.getAppointments(), len(database.getAppointments()))
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
